            <div class="row">
                <div class="col-md-12">
                    <h1 class="page-head-line">dashboard</h1>
                    <h1 class="page-subhead-line">全量模式下的dashboard</h1>

                </div>
            </div>
            <div class="row">
	            
                <div class="col-md-12 col-sm-12">
                    <div class="panel panel-info">
                        <div class="panel-heading">
                            dashboard介绍
                        </div>
                        <div class="panel-body">
                            <p>
                                在简单模式下关于权限的分配需要在被授权的机器上存放用户的公钥，用户才能操控对应的机器。但是当用户太多，而且用户会有离职的情况。管理权限就变的比较麻烦。在这种情况下需要安装全量模式，全量模式比简单模式多出来的部分就是dashboard。<br>
                                请在安装手册中安装完全量模式的安装，以下以安装在/home/work/mydan目录为例说明使用方式。<br><br>
                                
                                dashboard主要是处理三个问题:<br><br>
                                1.agent安装<br>
                                &nbsp;&nbsp;&nbsp;&nbsp;   dashboard起来后，页面上有一个安装链接，在每个机器上运行即可。普通用户也可以这么安装。<br><br>
                                2.权限问题<br>
                                    
                                    &nbsp;&nbsp;&nbsp;&nbsp;a. 登陆<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;ashboard需要和公司内部的sso相连（如果没有sso，可以安装mydan的sso）。链接sso通过修改/home/work/mydan/dashboard/code/sso文件来实现。<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;默认情况下这个code返回nobody，所以默认情况下每个人访问进去都是nobody这个用户。<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;sso的code里面是一个函数，最后return的即为sso识别出来的用户，函数的输入参数是dashboard提供的cookie值。<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;/home/work/mydan/dashboard/config.yml文件中的cookiekey值用来设置需要把哪个cookie传给sso的code。<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;config.yml中的ssocallback 用来指名如果没有对应的cookie时回跳的地址。<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;实现了这个sso code后每一个用户登陆进去都有一个自己唯一的存放公钥的地方。<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;需要注意的是sso code返回的username需要和服务器上用户名对应，否则权限分配会失败。<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;dashboard连接sso后用户登陆dashboard在setting页面存入自己的公钥。私钥存放在用户的家目录.ssh中。<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;公钥私钥生成方式用linux系统中的ssh－keygen生成即可。<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;生成的一对公钥私钥后，把公钥的内容在dashboard中保存，私钥重命名成.key后缀。<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;本质上连接sso是为了让用户存自己的公钥在dashboard服务中。<br><br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;在不连接sso的情况下，可以把用户的公钥存放在dashboard服务器的/home/work/mydan/etc/dashboard/auth目录下，比如foo用户的公钥文件存放路径为/home/work/mydan/etc/dashboard/auth/foo.pub  <br><br>
                                    
                                    &nbsp;&nbsp;&nbsp;&nbsp;b.访问权限分配<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;i.对接公司权限树 ：<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;访问权限的对接需要修改/home/work/mydan/dashboard/code/access文件，这个文件中是一个函数，函数输入参数是用户名，函数一个返回值为hash，hash的格式如: +{"host1": +{"user1": 1, "user2":1}, "10.10.10.1": +{"usr": 1}}，可以通过修改这个部分对接公司的权限数服务。在没有权限数服务的情况下，默认提供了工具来管理用户的权限<br><br>
                                    
                                    &nbsp;&nbsp;&nbsp;&nbsp;ii.使用系统默认权限管理：<br>
                                   
                                    &nbsp;&nbsp;&nbsp;&nbsp;工具路径：/home/work/mydan/dashboard/tools/access<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;参数说明:$0 [--user username] [--add work||--del root] [--access 10.10.1.1]<br>
                                    
                                    &nbsp;&nbsp;&nbsp;&nbsp;1. ./access :没有任何参数的情况下，返回系统中用户列表<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;2. ./access --user foo :  返回用户foo的权限分配情况<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;3. ./access --user foo --add work --access 10.10.10.1  : 给用户foo添加10.10.10.1这台机器work用户的权限<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;4. echo "10.10.10.1"|./access --user foo --add work  : 给用户foo添加10.10.10.1这台机器work用户的权限<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;5. cat iplist|./access --user foo --add work  : 给用户foo添加iplist文件中的所有机器work用户的权限<br>
                                    
                                    &nbsp;&nbsp;&nbsp;&nbsp;另：<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;添加和删除是一样的 --add 和 --del<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;一个用户只要一台机器的任何用户权限，也就有了这个用户本身的权限，比如给用户A 加上机器10.10.10.1的work用户权限，用户A就有了A用户和work用户的权限。<br>
                                    
                                    
                               
                                <br>
                                3.机器列表同步<br>
                                &nbsp;&nbsp;&nbsp;&nbsp;在dashboard中有一个完整的node机器管理。和dan目录下的使用方式一样。管理员在dashboard/node 里面维护项目机器。<br>
                                &nbsp;&nbsp;&nbsp;&nbsp;如果用户需要使用dashboard提供的机器列表，可以把自身的 /home/work/mydan/dan/node/service/synccache启动成一个服务。<br>

                                
                               
                               
                               <br><br><br><br>
                               另外：<br>
                               在dashboard中的安装agent页面、设置token页面、查看hosts页面使用到了服务器地址这个信息，如果dashboard是用nginx做负载均衡的情况下，请在nginx的location中添加proxy_set_header Host $host:$server_port; , 否则sso跳转回来时会出错，在页面请求安装脚本也会出错。<br> 
                               dashboard管理员需要使用/home/work/mydan/dan/tools/release工具把客户端代码打包发布到dashboard中供agent和client安装。<br>
                               对于普通用户在安装了客户端后需要修改/home/work/mydan/dan/.config , 把agent配置下被注释掉的role: client，把注释去了，标明自己当前是clent的角色。还需要把.config中的api地址修成dashboard的地址。<br>
                              
                            </p>
                        </div>
                    </div>
                </div>
             </div>
          
